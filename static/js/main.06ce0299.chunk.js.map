{"version":3,"sources":["images/background.jpg","Header/style.js","Header/index.js","Footer/style.js","Footer/index.js","Form/style.js","Form/Result/style.js","Form/Result/index.js","currencies.js","Form/index.js","Main/style.js","Main/index.js","Date/style.js","Date/index.js","useCurrentDate.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Title","styled","h1","Header","title","StyledFooter","footer","Footer","StyledForm","form","Label","label","StyledInput","input","Select","select","Button","button","StyledResult","div","Result","result","amount","toFixed","toCurrency","currencies","value","rate","Form","props","useState","setAmount","fromCurrency","setFromCurrency","setToCurrency","setResult","onSubmit","event","preventDefault","currency","calculateCurrency","onChange","target","type","min","required","className","name","map","key","StyledMain","main","myImage","Main","children","StyledDate","PlaceForDate","currentDate","Date","date","setDate","useEffect","intervalID","setInterval","clearInterval","useCurrentDate","toLocaleString","weekday","day","month","year","hour","minute","second","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.06ce0299.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/background.8907ff2a.jpg\";","import styled from \"styled-components\";\n\nexport const Title = styled.h1`\n    text-transform: uppercase;\n    text-align: center;\n    text-shadow: 3px 0px 0px #a07b24d3;\n    font-size: 80px;\n    font-family: 'Montserrat Subrayada', sans-serif;\n    margin: 30px 50px;\n\n    @media (max-width: 769px) {\n        font-size: 40px;\n    }\n\n    @media (max-width: 424px) {\n        margin: 10px auto;\n        font-size: 40px;\n    }\n`;","import React from \"react\";\nimport { Title } from \"./style\";\n\nconst Header = ({ title }) => (\n    <>\n        <Title>{title}</Title>\n    </>\n);\n\nexport default Header;\n","import styled from \"styled-components\";\n\nexport const StyledFooter = styled.footer`\n    font-size: 10px;\n    position: absolute;\n    bottom: 5px;\n`;","import React from \"react\";\nimport { StyledFooter } from \"./style\";\n\nconst Footer = () => (\n    <StyledFooter>\n        Pozdrawiam i życzę miłego dnia - Olga ;*\n    </StyledFooter>\n);\n\nexport default Footer;","import styled from \"styled-components\";\n\nconst StyledForm = styled.form`\n    font-size: 30px;\n    text-align: center;\n    padding: 10px;\n\n    @media (max-width: 769px) {\n        padding: 0px;\n        font-size: 20px;\n        margin: auto;\n        width: 200px;\n    }\n`;\n\nconst Label = styled.label`\n    margin: 5px 20px;\n\n    @media (max-width: 769px) {\n        display: block;\n        margin: 30px 0;\n        width: unset;\n        height: unset;\n    }\n`;\n\nconst StyledInput = styled.input`\n    background-color: transparent;\n    color: #fabc2a;\n    border: 1px solid #fabc2a;\n    width: 150px;\n    margin-bottom: 20px;\n    margin-left: 7px;\n    height: 40px;\n\n    @media (max-width: 769px) {\n        width: 100px;\n        height: unset;\n        margin: 0px;\n    }\n`;\n\nconst Select = styled.select`\n    background-color: transparent;\n    color: #fabc2a;\n    border: 1px solid #fabc2a;\n    width: 100px;\n    margin-bottom: 20px;\n    margin-left: 7px;\n    height: 40px;\n\n    @media (max-width: 769px) {\n        width: unset;\n        height: unset;\n        font-size: 20px;\n        margin: 0px;\n        margin-left: 6px;\n    }\n`;\n\nconst Button = styled.button`\n    margin: 20px 0;\n    background-color: #fabc2a;\n    text-transform: uppercase;\n    color: #262626;\n    padding: 5px;\n    font-weight: bold;\n    border: none;\n\n    &:hover {\n        color: #fabc2a;\n    background-color: #262626;\n    outline: 2px solid #fabc2a;\n    }\n\n    @media (max-width: 769px) {\n        margin-bottom: 10px;\n        padding: 12px;\n    }\n`;\n\nexport { StyledForm, Label, StyledInput, Select, Button };","import styled from \"styled-components\";\n\nexport const StyledResult = styled.div`\n    color: #fabc2a;\n    font-size: 50px;\n    text-align: center;\n    margin-top: 20px;\n\n    @media (max-width: 769px) {\n        font-size: 50px;\n        margin: 10px auto;\n    }\n`;","import React from \"react\";\nimport { StyledResult } from \"./style\";\n\nconst Result = ({ result }) => (\n    <StyledResult>{!!result ? <> {result.amount.toFixed(2)}&nbsp;{result.toCurrency} </> : \" \"}</StyledResult>\n);\n\n\nexport default Result;","export const currencies = [\n    {\n        value: \"PLN\",\n        rate: 1,\n    },\n    {\n        value: \"EUR\",\n        rate: 4.4,\n    },\n    {\n        value: \"CZK\",\n        rate: 0.16,\n    },\n    {\n        value: \"USD\",\n        rate: 3.7,\n    },\n];","import React, { useState } from \"react\";\nimport { StyledForm, Label, StyledInput, Select, Button } from \"./style\";\nimport Result from \"./Result\";\nimport { currencies } from \"../currencies\";\n\nconst Form = (props) => {\n\n    const [amount, setAmount] = useState(0);\n    const [fromCurrency, setFromCurrency] = useState(currencies[0].value);\n    const [toCurrency, setToCurrency] = useState(currencies[0].value);\n    const [result, setResult] = useState();\n\n    const onInputChange = ({ target }) => setAmount(target.value);\n\n    const onFirstSelectChange = ({ target }) => setFromCurrency(target.value);\n\n    const onSecondSelectChange = ({ target }) => setToCurrency(target.value);\n\n    const calculateCurrency = (fromCurrency, toCurrency, amount) => {\n        for (const currency of currencies) {\n            let rate = currency.rate;\n\n            if (fromCurrency === currency.value) {\n                amount *= rate;\n            };\n\n            if (toCurrency === currency.value) {\n                amount = amount / rate;\n            };\n        };\n        setResult({\n            amount: +amount,\n            toCurrency,\n        });\n    };\n\n    const onFormSubmit = (event) => {\n        event.preventDefault();\n\n        calculateCurrency(fromCurrency, toCurrency, amount);\n    };\n\n    return (\n        <StyledForm onSubmit={onFormSubmit}>\n            <Label>\n                Kwota: <StyledInput value={amount} onChange={onInputChange} type=\"number\" min=\"0\" required />\n            </Label>\n            <Label>\n                Z:\n            <Select className=\"converter__select\" value={fromCurrency} onChange={onFirstSelectChange} name=\"currency\" required>\n                    {currencies.map(currency => (\n                        <option key={currency.value} value={currency.value}>{currency.value}</option>\n                    ))}\n            </Select></Label>\n            <Label>\n                Na:\n            <Select className=\"converter__select\" value={toCurrency} onChange={onSecondSelectChange} name=\"currency\" required>\n                    {currencies.map(currency => (\n                        <option key={currency.value} value={currency.value}>{currency.value}</option>\n                    ))}\n            </Select></Label>\n            <Button className=\"converter__button\">Przelicz</Button>\n            <Result result={result} />\n        </StyledForm>\n    );\n};\n\nexport default Form;","import styled from \"styled-components\";\nimport myImage from \"../images/background.jpg\";\n\nexport const StyledMain = styled.main`\n    color: #FABC2A;\n    font-family: 'Muli', sans-serif;\n    background-image: linear-gradient(rgba(0, 0, 0, 0.7) 60%, rgba(80, 57, 7, 0.7)), url(${myImage});\n    background-attachment: fixed;\n    background-repeat: no-repeat;\n    background-size: cover;\n    padding: 30px;\n    height: 100vh;\n\n    @media (max-width: 1035px) {\n        background-image: unset;\n        background-color: rgb(37, 36, 36);\n    }\n`;","import React from \"react\";\nimport { StyledMain } from \"./style\";\n\nconst Main = (props) => (\n    <StyledMain>{props.children}</StyledMain>\n);\n\nexport default Main;","import styled from \"styled-components\";\n\nconst StyledDate = styled.div`\n    text-align: end;\n    font-family: 'Roboto Mono', monospace;\n    font-size: 0.7em;\n\n    @media (max-width: 411px) {\n        font-size: 0.5em;\n    }\n`;\n\nexport { StyledDate };","import React from \"react\";\nimport { StyledDate } from \"./style\";\nimport { useCurrentDate, formatDate } from \"../useCurrentDate\";\n\nconst PlaceForDate = () => {\n\n    const currentDate = useCurrentDate();\n\n    return (\n        <StyledDate>\n            <span>Dzisiaj jest {formatDate(currentDate)}</span>\n        </StyledDate>\n    );\n};\n\nexport default PlaceForDate;","import { useState, useEffect } from \"react\";\n\nconst useCurrentDate = () => {\n    const [date, setDate] = useState(new Date());\n\n    useEffect(() => {\n        const intervalID = setInterval(() => {\n            setDate(new Date());\n        }, 1000);\n\n        return () => {\n            clearInterval(intervalID);\n        };\n    }, []);\n\n    return date;\n};\n\nconst formatDate = (date) => {\n    return date.toLocaleString(\"pl\",\n        {\n            weekday: \"long\",\n            day: \"numeric\",\n            month: \"long\",\n            year: \"numeric\",\n            hour: \"numeric\",\n            minute: \"numeric\",\n            second: \"numeric\"\n        });\n};\n\nexport { useCurrentDate, formatDate };","import React from 'react';\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport Form from \"./Form\";\nimport Main from \"./Main\";\nimport PlaceForDate from \"./Date\";\n\n\nfunction App() {\n  return (\n    <Main>\n      <PlaceForDate />\n      <Header title=\"Kalkulator walut\" />\n      <Form />\n      <Footer />\n    </Main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}