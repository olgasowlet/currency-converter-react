{"version":3,"sources":["Header/index.js","Footer/index.js","Form/Result/index.js","Form/index.js","Main/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","title","className","Footer","Result","props","Form","type","min","required","name","value","Main","children","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uUASeA,G,UANA,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAF,OACX,4BAAQC,UAAU,UACd,wBAAIA,UAAU,iBAAiBD,MCMxBE,G,MARA,kBACX,4BAAQD,UAAU,UACd,yBAAKA,UAAU,eACX,uBAAGA,UAAU,qBAAb,+DCCGE,G,YAJA,SAACC,GAAD,OACX,yBAAKH,UAAU,wBC2BJI,EA3BF,SAACD,GAAD,OACT,0BAAMH,UAAU,aACZ,2BAAOA,UAAU,oBAAjB,UACW,2BAAOA,UAAU,mBAAmBK,KAAK,SAASC,IAAI,IAAIC,UAAQ,KAE7E,2BAAOP,UAAU,oBAAjB,KAEA,4BAAQA,UAAU,oBAAoBQ,KAAK,WAAWD,UAAQ,GACtD,4BAAQE,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,SAER,2BAAOT,UAAU,oBAAjB,MAEA,4BAAQA,UAAU,oBAAoBQ,KAAK,WAAWD,UAAQ,GACtD,4BAAQE,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,SAGR,4BAAQT,UAAU,qBAAlB,YACA,kBAAC,EAAD,QCpBOU,G,MAJF,SAACP,GAAD,OACb,0BAAMH,UAAU,QAAQG,EAAMQ,YCYfC,MAVf,WACE,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAQb,MAAM,qBACd,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCcc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a48c5e03.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nconst Header = ({title}) => (\n    <header className=\"header\">\n        <h1 className=\"header__title\">{title}</h1>\n    </header>\n);\n\nexport default Header;\n","import React from \"react\";\nimport \"./style.css\";\n\nconst Footer = () => (\n    <footer className=\"footer\">\n        <div className=\"footer__div\">\n            <p className=\"footer__paragraph\">Pozdrawiam i życzę miłego dnia - Olga ;*</p>\n        </div>\n    </footer>\n);\n\nexport default Footer;","import React from \"react\";\nimport \"./style.css\";\n\nconst Result = (props) => (\n    <div className=\"conventer__result\"></div>\n);\n\nexport default Result;","import React from \"react\";\nimport \"./style.css\";\nimport Result from \"./Result\";\n\nconst Form = (props) => (\n    <form className=\"conventer\">\n        <label className=\"conventer__label\">\n            Kwota: <input className=\"conventer__input\" type=\"number\" min=\"0\" required />\n        </label>\n        <label className=\"conventer__label\">\n            Z:\n        <select className=\"conventer__select\" name=\"currency\" required>\n                <option value=\"PLN\">PLN</option>\n                <option value=\"EUR\">EUR</option>\n                <option value=\"USD\">USD</option>\n                <option value=\"CZK\">CZK</option>\n            </select></label>\n        <label className=\"conventer__label\">\n            Na:\n        <select className=\"conventer__select\" name=\"currency\" required>\n                <option value=\"PLN\">PLN</option>\n                <option value=\"EUR\">EUR</option>\n                <option value=\"USD\">USD</option>\n                <option value=\"CZK\">CZK</option>\n            </select>\n        </label>\n        <button className=\"conventer__button\">Przelicz</button>\n        <Result />\n    </form>\n);\n\nexport default Form;","import React from \"react\";\nimport \"./style.css\";\n\nconst Main = (props) => (\n<main className=\"main\">{props.children}</main>\n);\n\nexport default Main;","import React from 'react';\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport Form from \"./Form\";\nimport Main from \"./Main\";\n\nfunction App() {\n  return (\n    <Main>\n      <Header title=\"Kalkulator walut\" />\n      <Form />\n      <Footer />\n    </Main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}