{"version":3,"sources":["Header/index.js","Footer/index.js","Form/Result/index.js","currencies.js","Form/index.js","Main/index.js","Date/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","title","className","Footer","Result","result","amount","toFixed","toCurrency","currencies","value","rate","Form","props","useState","setAmount","fromCurrency","setFromCurrency","setToCurrency","setResult","onSubmit","event","preventDefault","currency","calculateCurrency","onChange","target","type","min","required","name","map","key","Main","children","PlaceForDate","Date","date","setDate","useEffect","intervalID","setInterval","clearInterval","toLocaleString","weekday","day","month","year","hour","minute","second","formatDate","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.aff75f5f.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nconst Header = ({title}) => (\n    <header className=\"header\">\n        <h1 className=\"header__title\">{title}</h1>\n    </header>\n);\n\nexport default Header;\n","import React from \"react\";\nimport \"./style.css\";\n\nconst Footer = () => (\n    <footer className=\"footer\">\n        <div className=\"footer__div\">\n            <p className=\"footer__paragraph\">Pozdrawiam i życzę miłego dnia - Olga ;*</p>\n        </div>\n    </footer>\n);\n\nexport default Footer;","import React from \"react\";\nimport \"./style.css\";\n\nconst Result = ({ result }) => (\n    <div className=\"conventer__result\">{!!result ? <> {result.amount.toFixed(2)}&nbsp;{result.toCurrency} </> : \" \"}</div>\n);\n\n\nexport default Result;","export const currencies = [\n    {\n        value: \"PLN\",\n        rate: 1,\n    },\n    {\n        value: \"EUR\",\n        rate: 4.4,\n    },\n    {\n        value: \"CZK\",\n        rate: 0.16,\n    },\n    {\n        value: \"USD\",\n        rate: 3.7,\n    },\n];","import React, { useState } from \"react\";\nimport \"./style.css\";\nimport Result from \"./Result\";\nimport { currencies } from \"../currencies\";\n\nconst Form = (props) => {\n\n    const [amount, setAmount] = useState(0);\n    const [fromCurrency, setFromCurrency] = useState(currencies[0].value);\n    const [toCurrency, setToCurrency] = useState(currencies[0].value);\n    const [result, setResult] = useState();\n\n    const onInputChange = ({ target }) => setAmount(target.value);\n\n    const onFirstSelectChange = ({ target }) => setFromCurrency(target.value);\n\n    const onSecondSelectChange = ({ target }) => setToCurrency(target.value);\n\n    const calculateCurrency = (fromCurrency, toCurrency, amount) => {\n        for (const currency of currencies) {\n            let rate = currency.rate;\n\n            if (fromCurrency === currency.value) {\n                amount *= rate;\n            };\n\n            if (toCurrency === currency.value) {\n                amount = amount / rate;\n            };\n        };\n        setResult({\n            amount: +amount,\n            toCurrency,\n        });\n    };\n\n    const onFormSubmit = (event) => {\n        event.preventDefault();\n\n        calculateCurrency(fromCurrency, toCurrency, amount);\n    };\n\n    return (\n        <form className=\"conventer\" onSubmit={onFormSubmit}>\n            <label className=\"conventer__label\">\n                Kwota: <input className=\"conventer__input\" value={amount} onChange={onInputChange} type=\"number\" min=\"0\" required />\n            </label>\n            <label className=\"conventer__label\">\n                Z:\n            <select className=\"conventer__select\" value={fromCurrency} onChange={onFirstSelectChange} name=\"currency\" required>\n                    {currencies.map(currency => (\n                        <option key={currency.value} value={currency.value}>{currency.value}</option>\n                    ))}\n            </select></label>\n            <label className=\"conventer__label\">\n                Na:\n            <select className=\"conventer__select\" value={toCurrency} onChange={onSecondSelectChange} name=\"currency\" required>\n                    {currencies.map(currency => (\n                        <option key={currency.value} value={currency.value}>{currency.value}</option>\n                    ))}\n            </select></label>\n            <button className=\"conventer__button\">Przelicz</button>\n            <Result result={result} />\n        </form>\n    );\n};\n\nexport default Form;","import React from \"react\";\nimport \"./style.css\";\n\nconst Main = (props) => (\n<main className=\"main\">{props.children}</main>\n);\n\nexport default Main;","import React, { useState, useEffect } from \"react\";\nimport \"./style.css\";\n\nconst formatDate = (date) => {\n    return date.toLocaleString(\"pl\",\n        {\n            weekday: \"long\",\n            day: \"numeric\",\n            month: \"long\",\n            year: \"numeric\",\n            hour: \"numeric\",\n            minute: \"numeric\",\n            second: \"numeric\"\n        });\n};\n\nconst PlaceForDate = () => {\n    const [date, setDate] = useState(new Date());\n\n    useEffect(() => {\n        const intervalID = setInterval(() => {\n            setDate(new Date());\n        }, 1000);\n\n        return () => {\n            clearInterval(intervalID);\n        };\n    }, []);\n\n    return (\n        <div className=\"dateContainer\">\n            <span>Dzisiaj jest {formatDate(date)}</span>\n        </div>\n    );\n};\n\nexport default PlaceForDate;","import React from 'react';\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport Form from \"./Form\";\nimport Main from \"./Main\";\nimport PlaceForDate from \"./Date\";\n\n\nfunction App() {\n  return (\n    <Main>\n      <PlaceForDate />\n      <Header title=\"Kalkulator walut\" />\n      <Form />\n      <Footer />\n    </Main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}